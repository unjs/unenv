import type nodeCrypto from "node:crypto";

import { getRandomValues, randomUUID, subtle } from "./internal/crypto/web.ts";

import {
  Certificate,
  Cipher,
  Cipheriv,
  Decipher,
  Decipheriv,
  DiffieHellman,
  DiffieHellmanGroup,
  ECDH,
  Hash,
  Hmac,
  KeyObject,
  Sign,
  Verify,
  X509Certificate,
  checkPrime,
  checkPrimeSync,
  createCipheriv,
  createDecipheriv,
  createDiffieHellman,
  createDiffieHellmanGroup,
  createECDH,
  createHash,
  createHmac,
  createPrivateKey,
  createPublicKey,
  createSecretKey,
  createSign,
  createVerify,
  diffieHellman,
  fips,
  generateKey,
  generateKeyPair,
  generateKeyPairSync,
  generateKeySync,
  generatePrime,
  generatePrimeSync,
  getCipherInfo,
  getCiphers,
  getCurves,
  getDiffieHellman,
  getFips,
  getHashes,
  hash,
  hkdf,
  hkdfSync,
  pbkdf2,
  pbkdf2Sync,
  privateDecrypt,
  privateEncrypt,
  pseudoRandomBytes,
  publicDecrypt,
  prng,
  publicEncrypt,
  randomBytes,
  randomFill,
  randomFillSync,
  randomInt,
  rng,
  scrypt,
  scryptSync,
  secureHeapUsed,
  setEngine,
  setFips,
  sign,
  timingSafeEqual,
  verify,
  webcrypto,
} from "./internal/crypto/node.ts";

import constants from "./internal/crypto/constants.ts";

export * from "./internal/crypto/web.ts";

export * from "./internal/crypto/node.ts";

export { default as constants } from "./internal/crypto/constants.ts";

export default {
  // @ts-expect-error
  constants,
  // @ts-expect-error
  getRandomValues,
  randomUUID,
  subtle,
  // node
  Certificate,
  Cipher,
  Cipheriv,
  Decipher,
  Decipheriv,
  DiffieHellman,
  DiffieHellmanGroup,
  ECDH,
  Hash,
  Hmac,
  KeyObject,
  Sign,
  Verify,
  X509Certificate,
  checkPrime,
  checkPrimeSync,
  createCipheriv,
  createDecipheriv,
  createDiffieHellman,
  createDiffieHellmanGroup,
  createECDH,
  createHash,
  createHmac,
  createPrivateKey,
  createPublicKey,
  createSecretKey,
  createSign,
  createVerify,
  diffieHellman,
  fips,
  generateKey,
  generateKeyPair,
  generateKeyPairSync,
  generateKeySync,
  generatePrime,
  generatePrimeSync,
  getCipherInfo,
  getCiphers,
  getCurves,
  getDiffieHellman,
  getFips,
  getHashes,
  hash,
  hkdf,
  hkdfSync,
  pbkdf2,
  pbkdf2Sync,
  privateDecrypt,
  privateEncrypt,
  pseudoRandomBytes,
  publicDecrypt,
  prng,
  publicEncrypt,
  randomBytes,
  randomFill,
  randomFillSync,
  randomInt,
  rng,
  scrypt,
  scryptSync,
  secureHeapUsed,
  setEngine,
  setFips,
  sign,
  timingSafeEqual,
  verify,
  webcrypto,
} satisfies typeof nodeCrypto;
